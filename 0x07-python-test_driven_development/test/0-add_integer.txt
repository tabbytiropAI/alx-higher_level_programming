# run test with python3 -m doctest -v ./tests/0-add_integer.txt

First import method to test
>>> add_integer = __import__('0-add_integer').add_integer

SUCCESS CASES:

Test signed and unsigned ints and floats:
     >>> print(add_integer(1, 2))
     3
     >>> print(add_integer(-1, 2))
     1
     >>> print(add_integer(1.5, 2.9))
     3
     >>> print(add_integer(-2.9, 1))
     -1

Test use of default b=98 value:
     >>> print(add_integer(1))
     99

Additional Test Cases:

# Test positive and negative decimal numbers
>>> print(add_integer(1.2, -2.5))
-1
>>> print(add_integer(-3.8, 4.9))
1

# Test large integer values
>>> print(add_integer(1000000000000000000000, 2000000000000000000000))
3000000000000000000000
>>> print(add_integer(-99999999999999999999, 99999999999999999999))
0

# Test zero as one of the values
>>> print(add_integer(0, 10))
10
>>> print(add_integer(5, 0))
5
>>> print(add_integer(0, 0))
0

# Test rounding of floating-point numbers
>>> print(add_integer(1.4, 1.6))
3
>>> print(add_integer(2.5, 3.9))
6

# Test scientific notation
>>> print(add_integer(1e10, 2e10))
30000000000

# Test edge case where a and b are equal
>>> print(add_integer(10, 10))
20

FAIL CASES:

Test no args:
     >>> print(add_integer(None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer
     >>> print(add_integer(None, None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer

Test extra args:
     >>> print(add_integer(1, 2, 3))
     Traceback (most recent call last):
     ...
     TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test other data types:
     >>> print(add_integer("hey"))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer
     >>> print(add_integer(0, [1, 2, 3]))
     Traceback (most recent call last):
     ...
     TypeError: b must be an integer

Test max/min numbers Python can handle ("inf" is infinity):
     >>> print(add_integer(float("inf")))
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer
     >>> print(add_integer(float("-inf")))
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer

Test special float NaN in Python (not a number):
     >>> print(add_integer(float("NaN")))
     Traceback (most recent call last):
     ...
     ValueError: cannot convert float NaN to integer
